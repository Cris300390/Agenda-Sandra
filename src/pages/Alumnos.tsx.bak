import React, { useEffect, useMemo, useState } from 'react'
import * as Students from '../data/supaStudents'
import type { StudentApp } from '../data/supaStudents'

/* =============== Toast (ligero, sin dependencias) =============== */
type ToastKind = 'success' | 'error' | 'info'
function useToast() {
  const [msg, setMsg] = useState<string>('')
  const [kind, setKind] = useState<ToastKind>('info')
  const [open, setOpen] = useState(false)
  function show(message: string, type: ToastKind = 'info', ms = 2400) {
    setMsg(message)
    setKind(type)
    setOpen(true)
    window.clearTimeout((show as any)._t)
    ;(show as any)._t = window.setTimeout(() => setOpen(false), ms)
  }
  const ui = open ? (
    <div
      aria-live="polite"
      style={{
        position: 'fixed', right: 16, top: 16, zIndex: 50,
        background: kind === 'success' ? '#16a34a'
                 : kind === 'error'   ? '#ef4444'
                 : '#0ea5e9',
        color: 'white', padding: '12px 14px', borderRadius: 10,
        boxShadow: '0 10px 30px rgba(0,0,0,.15)', fontWeight: 700,
        minWidth: 240, textAlign: 'center'
      }}
    >
      {msg}
    </div>
  ) : null
  return { show, ui }
}

/* =============== Estilos mini (siguen la estética) =============== */
const chip = (bg: string, color = '#0f172a') => ({
  background: bg, color, borderRadius: 9999, padding: '4px 10px', fontSize: 12, fontWeight: 700
})
const btn = (bg: string, color = 'white') => ({
  background: bg, color, border: 'none', borderRadius: 12, padding: '10px 14px',
  fontWeight: 800, cursor: 'pointer', boxShadow: '0 6px 16px rgba(0,0,0,.08)'
})

/* =============== Página =============== */
export default function Alumnos() {
  const { show, ui } = useToast()

  const [all, setAll] = useState<StudentApp[]>([])
  const [filter, setFilter] = useState<'all' | 'active' | 'inactive'>('all')
  const [query, setQuery] = useState<string>('')

  const [current, setCurrent] = useState<StudentApp | null>(null)
  const [form, setForm] = useState<{ name: string; active: boolean; price: string; note: string }>({
    name: '', active: true, price: '', note: ''
  })
  const [saving, setSaving] = useState(false)
  const [deleting, setDeleting] = useState(false)

  // Cargar alumnos
  useEffect(() => {
    (async () => {
      try {
        const list = await Students.list()
        setAll(list)
        // seleccionar el primero si existe
        if (list.length > 0) selectStudent(list[0])
      } catch (e: any) {
        console.error(e)
        show('No se pudo cargar alumnos', 'error')
      }
    })()
  }, [])

  function selectStudent(s: StudentApp | null) {
    setCurrent(s)
    if (!s) {
      setForm({ name: '', active: true, price: '', note: '' })
      return
    }
    setForm({
      name: s.name ?? '',
      active: s.active ?? true,
      price: s.price != null ? String(s.price) : '',
      note: s.note ?? ''
    })
  }

  function startNew() {
    selectStudent({
      id: undefined,
      name: '',
      active: true,
      price: null,
      note: ''
    })
  }

  const listFiltered = useMemo(() => {
    let rows = [...all]
    if (filter === 'active') rows = rows.filter(r => r.active)
    if (filter === 'inactive') rows = rows.filter(r => !r.active)
    if (query.trim() !== '') {
      const q = query.trim().toLowerCase()
      rows = rows.filter(r => (r.name ?? '').toLowerCase().includes(q))
    }
    return rows
  }, [all, filter, query])

  const totalActivos = useMemo(() => all.filter(a => a.active).length, [all])

  function onChange<K extends keyof typeof form>(key: K, value: (typeof form)[K]) {
    setForm(prev => ({ ...prev, [key]: value }))
  }

  async function save() {
    const name = form.name.trim()
    if (!name) {
      show('El nombre es obligatorio', 'error')
      return
    }
    setSaving(true)
    try {
      const values: Partial<StudentApp> = {
        name,
        active: !!form.active,
        price: form.price.trim() === '' ? null : Number(form.price),
        note: form.note.trim() === '' ? null : form.note
      }
      let saved: StudentApp
      if (!current || !current.id) {
        // crear
        saved = await Students.create(values)
        setAll(prev => [...prev, saved].sort((a, b) => a.name.localeCompare(b.name, 'es')))
        selectStudent(saved)
        show('Alumno creado', 'success')
      } else {
        // actualizar
        saved = await Students.update(current.id, values)
        setAll(prev => prev
          .map(a => (a.id === saved.id ? saved : a))
          .sort((a, b) => a.name.localeCompare(b.name, 'es')))
        selectStudent(saved)
        show('Cambios guardados', 'success')
      }
    } catch (e: any) {
      console.error(e)
      show('Error al guardar', 'error')
    } finally {
      setSaving(false)
    }
  }

  async function remove() {
    if (!current?.id) return
    if (!confirm('¿Eliminar este alumno? Esta acción no se puede deshacer.')) return
    setDeleting(true)
    try {
      await Students.remove(current.id)
      setAll(prev => prev.filter(a => a.id !== current.id))
      selectStudent(null)
      show('Alumno eliminado', 'success')
    } catch (e: any) {
      console.error(e)
      show('No se pudo eliminar', 'error')
    } finally {
      setDeleting(false)
    }
  }

  return (
    <div style={{ padding: 16 }}>
      {ui /* toast */}
      <h2 style={{ margin: '8px 0 20px', fontSize: 28, fontWeight: 900 }}>Alumnos</h2>

      {/* contadores */}
      <div style={{ display: 'flex', gap: 8, marginBottom: 8 }}>
        <span style={chip('#f1f5f9', '#0f172a')}>{all.length} total</span>
        <span style={chip('#dcfce7', '#166534')}>{totalActivos} activos</span>
      </div>

      {/* layout */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'minmax(280px, 420px) 1fr',
        gap: 18,
      }}>
        {/* Panel listado */}
        <div style={{ background: 'white', borderRadius: 16, boxShadow: '0 8px 24px rgba(0,0,0,.06)', padding: 14 }}>
          <input
            placeholder="Buscar por nombre..."
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            style={{
              width: '100%', borderRadius: 12, border: '1px solid #e5e7eb', padding: '10px 12px',
              outline: 'none', marginBottom: 10
            }}
          />

          {/* tabs */}
          <div style={{ display: 'flex', gap: 8, marginBottom: 12 }}>
            <button
              style={{ ...chip(filter === 'all' ? '#eef2ff' : '#f1f5f9'), border: 'none', cursor: 'pointer' }}
              onClick={() => setFilter('all')}
            >Todos</button>
            <button
              style={{ ...chip(filter === 'active' ? '#dcfce7' : '#f1f5f9'), border: 'none', cursor: 'pointer' }}
              onClick={() => setFilter('active')}
            >Activos</button>
            <button
              style={{ ...chip(filter === 'inactive' ? '#fee2e2' : '#f1f5f9'), border: 'none', cursor: 'pointer' }}
              onClick={() => setFilter('inactive')}
            >Inactivos</button>

            <div style={{ marginLeft: 'auto' }} />
            <button style={btn('linear-gradient(135deg,#a855f7,#ec4899)')} onClick={startNew}>
              + Nuevo alumno
            </button>
          </div>

          {/* Lista */}
          <div style={{ display: 'grid', gap: 8 }}>
            {listFiltered.map((s) => {
              const selected = current?.id === s.id
              return (
                <button
                  key={s.id || s.name}
                  onClick={() => selectStudent(s)}
                  style={{
                    display: 'flex', alignItems: 'center', justifyContent: 'space-between',
                    background: selected ? '#f5f3ff' : '#f8fafc',
                    border: '1px solid #e5e7eb', borderRadius: 14, padding: 12, textAlign: 'left', cursor: 'pointer'
                  }}
                >
                  <div style={{ display: 'flex', alignItems: 'center', gap: 10 }}>
                    <div style={{
                      width: 26, height: 26, borderRadius: 9999,
                      background: 'linear-gradient(135deg,#a78bfa,#f472b6)'
                    }} />
                    <div style={{ fontWeight: 800 }}>{s.name}</div>
                  </div>
                  <span style={chip(s.active ? '#dcfce7' : '#fee2e2', s.active ? '#166534' : '#991b1b')}>
                    {s.active ? 'Activo' : 'Inactivo'}
                  </span>
                </button>
              )
            })}
            {listFiltered.length === 0 && (
              <div style={{ color: '#64748b', padding: 12 }}>Sin resultados…</div>
            )}
          </div>
        </div>

        {/* Panel edición / creación */}
        <div style={{ background: 'white', borderRadius: 16, boxShadow: '0 8px 24px rgba(0,0,0,.06)', padding: 16 }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: 10, marginBottom: 10 }}>
            <h3 style={{ margin: 0, fontSize: 20, fontWeight: 900 }}>
              {current?.id ? 'Editar alumno' : 'Nuevo alumno'}
            </h3>
            {/* No mostramos ID para no “ensuciar” la vista */}
            <div style={{ marginLeft: 'auto' }}>
              {current?.id && (
                <button
                  onClick={remove}
                  disabled={deleting}
                  style={{ ...btn('#fee2e2', '#991b1b') }}
                >
                  {deleting ? 'Eliminando…' : 'Eliminar'}
                </button>
              )}
            </div>
          </div>

          <div style={{ display: 'grid', gap: 12 }}>
            <label style={{ fontWeight: 700, color: '#334155' }}>
              Nombre
              <input
                value={form.name}
                onChange={(e) => onChange('name', e.target.value)}
                placeholder="Nombre del alumno"
                style={{
                  width: '100%', marginTop: 6,
                  borderRadius: 12, border: '1px solid #e5e7eb', padding: '10px 12px', outline: 'none'
                }}
              />
            </label>

            <div style={{ display: 'flex', gap: 12, alignItems: 'center', flexWrap: 'wrap' }}>
              <Toggle checked={form.active} onChange={(v: boolean) => onChange('active', v)} />

              <label style={{ fontWeight: 700, color: '#334155', flex: '1 1 180px' }}>
                Tarifa (€)
                <input
                  value={form.price}
                  onChange={(e) => {
                    const v = e.target.value
                    // sólo permite números, coma/punto y vacío
                    if (/^\d*(?:[.,]\d{0,2})?$/.test(v) || v === '') onChange('price', v.replace(',', '.'))
                  }}
                  placeholder="Ej.: 12, 15.5, 20…"
                  style={{
                    width: '100%', marginTop: 6,
                    borderRadius: 12, border: '1px solid #e5e7eb', padding: '10px 12px', outline: 'none'
                  }}
                />
              </label>
            </div>

            <label style={{ fontWeight: 700, color: '#334155' }}>
              Nota (opcional)
              <textarea
                value={form.note}
                onChange={(e) => onChange('note', e.target.value)}
                rows={4}
                placeholder="Observaciones, nivel, objetivos, etc."
                style={{
                  width: '100%', marginTop: 6,
                  borderRadius: 12, border: '1px solid #e5e7eb', padding: '10px 12px', outline: 'none',
                  resize: 'vertical'
                }}
              />
            </label>

            <div style={{ display: 'flex', gap: 10, marginTop: 6 }}>
              <button
                onClick={save}
                disabled={saving}
                style={btn('linear-gradient(135deg,#a855f7,#ec4899)')}
              >
                {saving ? 'Guardando…' : 'Guardar cambios'}
              </button>
              <button
                onClick={() => (current?.id ? selectStudent(current) : selectStudent(null))}
                style={btn('#e2e8f0', '#0f172a')}
              >
                Cancelar
              </button>
            </div>
          </div>
        </div>

      </div>
    </div>
  )
}







