import React, { useEffect, useMemo, useState } from 'react'
import * as Students from '../data/supaStudents'
import type { StudentApp as Student } from '../data/supaStudents'
import { toast } from '../ui/Toast' // existe en tu proyecto (ToastProvider)

type Filter = 'all' | 'active' | 'inactive'

export default function Alumnos() {
  const [filter, setFilter] = useState<Filter>('all')
  const [search, setSearch] = useState('')
  const [items, setItems] = useState<Student[]>([])
  const [loading, setLoading] = useState(false)

  // selecci√≥n actual (para editar)
  const [current, setCurrent] = useState<Student | null>(null)
  // buffer de edici√≥n/creaci√≥n
  const [name, setName] = useState('')
  const [active, setActive] = useState(true)
  const [tarifa, setTarifa] = useState<string>('0')
  const [nota, setNota] = useState('')

  // cargar
  useEffect(() => {
    (async () => {
      setLoading(true)
      try {
        const list = await Students.list()
        setItems(list)
        // si hay uno seleccionado, refresca su info
        if (current) {
          const ref = list.find(s => s.id === current.id) || null
          setCurrent(ref)
          if (ref) syncForm(ref)
        }
      } catch (e: any) {
        console.error(e)
        toast.error('No se pudieron cargar los alumnos')
      } finally {
        setLoading(false)
      }
    })()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  function syncForm(s: Student) {
    setName(s.name || '')
    setActive(!!s.active)
    setTarifa(String(s.tarifa ?? 0))
    setNota(s.nota ?? '')
  }

  function clearFormForNew() {
    setCurrent(null)
    setName('')
    setActive(true)
    setTarifa('0')
    setNota('')
  }

  const total = items.length
  const activos = items.filter(s => s.active).length

  const filtered = useMemo(() => {
    let list = items
    if (filter === 'active')   list = list.filter(s => s.active)
    if (filter === 'inactive') list = list.filter(s => !s.active)
    if (search.trim()) {
      const q = search.toLowerCase()
      list = list.filter(s => s.name.toLowerCase().includes(q))
    }
    return list
  }, [items, filter, search])

  async function handleCreate() {
    if (!name.trim()) return toast.warn('El nombre es obligatorio')
    try {
      await Students.create({
        name: name.trim(),
        active,
        tarifa: Number.parseFloat(tarifa || '0') || 0,
        nota: nota.trim(),
      })
      toast.success('Alumno creado')
      await reloadList()
      clearFormForNew()
    } catch (e: any) {
      console.error(e)
      toast.error('No se pudo crear el alumno')
    }
  }

  async function handleUpdate() {
    if (!current) return
    if (!name.trim()) return toast.warn('El nombre es obligatorio')
    try {
      await Students.update(current.id, {
        name: name.trim(),
        active,
        tarifa: Number.parseFloat(tarifa || '0') || 0,
        nota: nota.trim(),
      })
      toast.success('Cambios guardados')
      await reloadList(current.id)
    } catch (e: any) {
      console.error(e)
      toast.error('No se pudo guardar')
    }
  }

  async function handleRemove() {
    if (!current) return
    const ok = window.confirm(`Eliminar a "${current.name}" permanentemente?`)
    if (!ok) return
    try {
      await Students.remove(current.id)
      toast.success('Alumno eliminado')
      await reloadList()
      clearFormForNew()
    } catch (e: any) {
      console.error(e)
      toast.error('No se pudo eliminar')
    }
  }

  async function reloadList(keepId?: string) {
    setLoading(true)
    try {
      const list = await Students.list()
      setItems(list)
      if (keepId) {
        const ref = list.find(s => s.id === keepId) || null
        setCurrent(ref)
        if (ref) syncForm(ref)
      }
    } finally {
      setLoading(false)
    }
  }

  function fmtEur(v?: number) {
    const n = Number(v ?? 0)
    return n.toLocaleString('es-ES', { style: 'currency', currency: 'EUR', maximumFractionDigits: 2 })
  }

  /* ======= UI ======= */
  return (
    <div style={{ padding: '16px 20px' }}>
      <header style={{ display: 'flex', alignItems: 'center', gap: 10, marginBottom: 12 }}>
        <h2 style={{ margin: 0, fontSize: 30, fontWeight: 900, color: '#0f172a' }}>Alumnos</h2>
        <span style={{ marginLeft: 'auto', display: 'flex', gap: 8 }}>
          <Badge color="#7c3aed">{total} total</Badge>
          <Badge color="#059669">{activos} activos</Badge>
        </span>
      </header>

      <div
        style={{
          display: 'grid',
          gridTemplateColumns: 'minmax(320px, 420px) 1fr',
          gap: 16,
          alignItems: 'start',
        }}
      >
        {/* LISTA */}
        <section style={card()}>
          <div style={{ display: 'grid', gap: 10 }}>
            <input
              placeholder="Buscar por nombre‚Ä¶"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
              style={input()}
            />

            <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
              <Tab onClick={() => setFilter('all')}      active={filter === 'all'}>Todos</Tab>
              <Tab onClick={() => setFilter('active')}   active={filter === 'active'}>Activos</Tab>
              <Tab onClick={() => setFilter('inactive')} active={filter === 'inactive'}>Inactivos</Tab>

              <div style={{ marginLeft: 'auto' }} />
              <Button
                onClick={clearFormForNew}
                variant="primary"
              >
                + Nuevo alumno
              </Button>
            </div>

            <hr style={hr()} />

            <div style={{ display: 'grid', gap: 8 }}>
              {loading && <div style={{ color: '#64748b', fontSize: 14 }}>Cargando‚Ä¶</div>}

              {!loading && filtered.length === 0 && (
                <div style={{ color: '#64748b', fontSize: 14 }}>Sin resultados.</div>
              )}

              {filtered.map((s) => {
                const isSelected = current?.id === s.id
                return (
                  <button
                    key={s.id}
                    onClick={() => { setCurrent(s); syncForm(s); }}
                    style={{
                      ...row(),
                      ...(isSelected ? { outline: '2px solid #a78bfa', background: '#f6f3ff' } : {}),
                    }}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                      <Avatar name={s.name} />
                      <div style={{ textAlign: 'left' }}>
                        <div style={{ fontWeight: 700, color: '#0f172a' }}>{s.name}</div>
                        <div style={{ fontSize: 12, color: '#64748b' }}>{fmtEur(s.tarifa)} / hora</div>
                      </div>
                    </div>

                    <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                      {s.nota && (
                        <span title="Tiene nota" style={{ fontSize: 14, color: '#6366f1' }}>üìù</span>
                      )}
                      <Badge color={s.active ? '#10b981' : '#ef4444'}>
                        {s.active ? 'Activo' : 'Inactivo'}
                      </Badge>
                    </div>
                  </button>
                )
              })}
            </div>
          </div>
        </section>

        {/* FORM */}
        <section style={card()}>
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <h3 style={{ margin: 0, fontSize: 20, fontWeight: 800, color: '#0f172a' }}>
              {current ? 'Editar alumno' : 'Nuevo alumno'}
            </h3>
            <div style={{ marginLeft: 'auto' }} />
            {current && (
              <Button onClick={handleRemove} variant="danger" title="Eliminar alumno">
                Eliminar
              </Button>
            )}
          </div>

          <hr style={hr()} />

          <div style={{ display: 'grid', gap: 12 }}>
            {/* Nombre */}
            <label style={label()}>Nombre</label>
            <input
              value={name}
              onChange={e => setName(e.target.value)}
              placeholder="Nombre del alumno"
              style={input()}
            />

            {/* Estado */}
            <label style={label()}>Estado</label>
            <div style={{ display: 'flex', alignItems: 'center', gap: 10 }}>
              <Switch checked={active} onChange={setActive} />
              <span style={{ fontWeight: 700, color: active ? '#059669' : '#ef4444' }}>
                {active ? 'Activo' : 'Inactivo'}
              </span>
            </div>

            {/* Tarifa */}
            <label style={label()}>Tarifa (‚Ç¨/hora)</label>
            <div style={{ position: 'relative' }}>
              <span style={{ position: 'absolute', left: 12, top: '50%', transform: 'translateY(-50%)', color: '#64748b' }}>‚Ç¨</span>
              <input
                value={tarifa}
                onChange={(e) => {
                  // permite n√∫meros y punto
                  const v = e.target.value.replace(',', '.')
                  if (/^[0-9]*([.][0-9]{0,2})?$/.test(v) || v === '') setTarifa(v)
                }}
                placeholder="0"
                style={{ ...input(), paddingLeft: 28, maxWidth: 220 }}
              />
            </div>

            {/* Nota */}
            <label style={label()}>Nota (opcional)</label>
            <textarea
              value={nota}
              onChange={(e) => setNota(e.target.value)}
              placeholder="Observaciones, detalles, etc."
              rows={4}
              style={{ ...input(), resize: 'vertical' }}
            />

            <div style={{ display: 'flex', gap: 8, marginTop: 6 }}>
              {current ? (
                <Button onClick={handleUpdate} variant="primary">Guardar cambios</Button>
              ) : (
                <Button onClick={handleCreate} variant="primary">Crear alumno</Button>
              )}
              <Button onClick={clearFormForNew} variant="ghost">Cancelar</Button>
            </div>
          </div>
        </section>
      </div>
    </div>
  )
}

/* ======= UI helpers ======= */
function card(): React.CSSProperties {
  return {
    background: 'white',
    borderRadius: 16,
    boxShadow: '0 10px 25px rgba(2,6,23,.08)',
    padding: 16,
  }
}
function input(): React.CSSProperties {
  return {
    width: '100%',
    border: '1px solid #e5e7eb',
    borderRadius: 12,
    padding: '10px 12px',
    outline: 'none',
    fontSize: 14,
    color: '#0f172a',
    background: '#fff',
  }
}
function label(): React.CSSProperties {
  return { fontSize: 12, color: '#6b7280', fontWeight: 700 }
}
function hr(): React.CSSProperties {
  return { border: 0, borderTop: '1px solid #f1f5f9', margin: '12px 0' }
}
function row(): React.CSSProperties {
  return {
    width: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    gap: 10,
    padding: 12,
    background: '#f8fafc',
    borderRadius: 12,
    border: '1px solid #eef2f7',
    cursor: 'pointer',
    textAlign: 'left' as const,
  }
}

function Badge({ children, color = '#64748b' }: { children: React.ReactNode; color?: string }) {
  return (
    <span
      style={{
        display: 'inline-block',
        background: color,
        color: 'white',
        borderRadius: 9999,
        padding: '2px 10px',
        fontSize: 12,
        fontWeight: 700,
        boxShadow: '0 6px 14px rgba(0,0,0,.08)'
      }}
    >
      {children}
    </span>
  )
}

function Tab({ children, active, onClick }: { children: React.ReactNode; active?: boolean; onClick?: () => void }) {
  return (
    <button
      onClick={onClick}
      style={{
        borderRadius: 9999,
        border: active ? '2px solid #a78bfa' : '1px solid #e5e7eb',
        background: active ? '#f6f3ff' : 'white',
        padding: '6px 12px',
        fontWeight: 700,
        color: active ? '#5b21b6' : '#111827',
      }}
    >
      {children}
    </button>
  )
}

function Button({
  children, onClick, variant = 'ghost', title
}: { children: React.ReactNode; onClick?: () => void; variant?: 'primary' | 'danger' | 'ghost'; title?: string }) {
  const styles: Record<string, React.CSSProperties> = {
    primary: {
      background: 'linear-gradient(135deg,#ec4899,#a855f7)',
      color: 'white', border: 'none',
    },
    danger: {
      background: '#ef4444', color: 'white', border: 'none',
    },
    ghost: {
      background: '#f8fafc', color: '#0f172a', border: '1px solid #e5e7eb',
    },
  }
  return (
    <button
      title={title}
      onClick={onClick}
      style={{
        ...styles[variant],
        padding: '10px 14px',
        borderRadius: 12,
        fontWeight: 800,
        boxShadow: '0 10px 20px rgba(0,0,0,.06)'
      }}
    >
      {children}
    </button>
  )
}

function Avatar({ name }: { name: string }) {
  const letter = (name || '?').trim().charAt(0).toUpperCase()
  return (
    <div
      aria-hidden
      style={{
        width: 28, height: 28,
        borderRadius: 9999,
        background: 'linear-gradient(135deg,#93c5fd,#a78bfa)',
        color: 'white',
        display: 'grid',
        placeItems: 'center',
        fontWeight: 900,
        boxShadow: '0 6px 14px rgba(59,130,246,.25)'
      }}
    >
      {letter}
    </div>
  )
}

function Switch({ checked, onChange }: { checked: boolean; onChange: (v: boolean) => void }) {
  return (
    <button
      onClick={() => onChange(!checked)}
      role="switch"
      aria-checked={checked}
      style={{
        width: 48, height: 28, borderRadius: 9999,
        background: checked ? '#10b981' : '#e5e7eb',
        border: 'none', position: 'relative',
      }}
    >
      <span
        style={{
          position: 'absolute',
          top: 3, left: checked ? 24 : 3,
          width: 22, height: 22, background: 'white',
          borderRadius: 9999, boxShadow: '0 2px 6px rgba(0,0,0,.15)',
          transition: 'left .15s ease'
        }}
      />
    </button>
  )
}

